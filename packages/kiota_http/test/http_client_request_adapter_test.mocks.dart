// Mocks generated by Mockito 5.4.4 from annotations
// in kiota_http/test/http_client_request_adapter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i5;
import 'dart:typed_data' as _i7;

import 'package:http/http.dart' as _i2;
import 'package:kiota_abstractions/kiota_abstractions.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeParseNode_2 extends _i1.SmartFake implements _i3.ParseNode {
  _FakeParseNode_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSerializationWriter_3 extends _i1.SmartFake
    implements _i3.SerializationWriter {
  _FakeSerializationWriter_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<_i7.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
      ) as _i4.Future<_i7.Uint8List>);

  @override
  _i4.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i4.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthenticationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationProvider extends _i1.Mock
    implements _i3.AuthenticationProvider {
  MockAuthenticationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> authenticateRequest(
    _i3.RequestInformation? request, [
    Map<String, Object>? additionalAuthenticationContext,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticateRequest,
          [
            request,
            additionalAuthenticationContext,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [ParseNodeFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockParseNodeFactory extends _i1.Mock implements _i3.ParseNodeFactory {
  MockParseNodeFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get validContentType => (super.noSuchMethod(
        Invocation.getter(#validContentType),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#validContentType),
        ),
      ) as String);

  @override
  _i3.ParseNode getRootParseNode(
    String? contentType,
    _i7.Uint8List? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRootParseNode,
          [
            contentType,
            content,
          ],
        ),
        returnValue: _FakeParseNode_2(
          this,
          Invocation.method(
            #getRootParseNode,
            [
              contentType,
              content,
            ],
          ),
        ),
      ) as _i3.ParseNode);
}

/// A class which mocks [SerializationWriterFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockSerializationWriterFactory extends _i1.Mock
    implements _i3.SerializationWriterFactory {
  MockSerializationWriterFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get validContentType => (super.noSuchMethod(
        Invocation.getter(#validContentType),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#validContentType),
        ),
      ) as String);

  @override
  _i3.SerializationWriter getSerializationWriter(String? contentType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSerializationWriter,
          [contentType],
        ),
        returnValue: _FakeSerializationWriter_3(
          this,
          Invocation.method(
            #getSerializationWriter,
            [contentType],
          ),
        ),
      ) as _i3.SerializationWriter);
}

/// A class which mocks [ParseNode].
///
/// See the documentation for Mockito's code generation for more information.
class MockParseNode extends _i1.Mock implements _i3.ParseNode {
  MockParseNode() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onBeforeAssignFieldValues(_i3.ParsableHook? _onBeforeAssignFieldValues) =>
      super.noSuchMethod(
        Invocation.setter(
          #onBeforeAssignFieldValues,
          _onBeforeAssignFieldValues,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onAfterAssignFieldValues(_i3.ParsableHook? _onAfterAssignFieldValues) =>
      super.noSuchMethod(
        Invocation.setter(
          #onAfterAssignFieldValues,
          _onAfterAssignFieldValues,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ParseNode? getChildNode(String? identifier) =>
      (super.noSuchMethod(Invocation.method(
        #getChildNode,
        [identifier],
      )) as _i3.ParseNode?);

  @override
  Iterable<T> getCollectionOfPrimitiveValues<T>() => (super.noSuchMethod(
        Invocation.method(
          #getCollectionOfPrimitiveValues,
          [],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<T> getCollectionOfEnumValues<T extends Enum>() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollectionOfEnumValues,
          [],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<T> getCollectionOfObjectValues<T extends _i3.Parsable>(
          _i3.ParsableFactory<T>? factory) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollectionOfObjectValues,
          [factory],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  T? getObjectValue<T extends _i3.Parsable>(_i3.ParsableFactory<T>? factory) =>
      (super.noSuchMethod(Invocation.method(
        #getObjectValue,
        [factory],
      )) as T?);
}
